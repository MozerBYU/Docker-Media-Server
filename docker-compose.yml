version: "3.9"

########## SECRETS ##########
# The use of docker secrets is for importing secrets from files to keep sensitive usernames or passwords from being passed or preserved in plaintext.
#
## See: https://docs.docker.com/engine/swarm/secrets/#defining-and-using-secrets-in-compose-files
## See also: https://docs.docker.com/reference/compose-file/secrets/
#
##### AUTHELIA SECRETS #####
AUTHELIA_ENCRYPTION_SECRETS_FILE:
  file: ${SECRETSDIR}/.secrets/authelia__encryption_secrets.txt
AUTHELIA_JWT_SECRETS_FILE:
  file: ${SECRETSDIR}/.secrets/authelia_jwt_secrets.txt
AUTHELIA_POSTGRES_SECRETS_FILE:
  file: ${SECRETSDIR}/.secrets/authelia_postgres_secrets.txt
AUTHELIA_SESSION_SECRETS_FILE:
  file: ${SECRETSDIR}/.secrets/authelia_session_secrets.txt

##### DATABASE SECRETS #####
DB_ROOT_SECRETS_FILE:
  file: ${SECRETSDIR}/.secrets/db_root_secrets.txt
DB_SECRETS_FILE:
  file: ${SECRETSDIR}/.secrets/db_secrets.txt
PGADMIN_SECRETS_FILE:
  file: ${SECRETSDIR}/.secrets/pgadmin_secrets.txt

########## NETWORKS ##########
# You may customize the network subnets as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

networks:
  default:
    driver: bridge
  frontend_proxy: # Frontend Apps Network
    name: frontend_proxy
    driver: bridge
    ipam:
      config:
        - subnet: ${FRONTEND_NETWORK}
  backend_proxy: # Backend Apps Network
    name: backend_proxy
    driver: bridge
    ipam:
      config:
        - subnet: ${BACKEND_NETWORK} 
  socket_proxy: # Socket Proxy Network. !!!!WARNING!!! Only socketproxy and services that need it should be on this network
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: ${SOCKET_NETWORK}

########## EXTENSION FIELDS ##########

# Common environment values
x-environment-no-privilege: &basic-tz-puid-pgid
  TZ: ${TZ}
  PUID: ${PUID}
  PGID: ${PGID}

x-environment-some-privilege: &higher-tz-puid-pgid
  TZ: ${TZ}
  PUID: ${PUID_PRIV}
  PGID: ${PGID_PRIV}

x-environment-network: &disable-ipv6
  DISABLE_IPV6: "true"

# Keys for core apps
x-common-keys-apps: &common-keys-apps
  networks: 
    - frontend_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

# Keys for core services
x-common-keys-core: &common-keys-core
  networks: 
    - frontend_proxy
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys for core db services
x-common-keys-db: &common-keys-db
  networks: 
    - backend_proxy
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys for core media services
x-common-keys-media: &common-keys-media
  networks: 
    - frontend_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

########## SERVICES ##########
#
# All services listed by application type in alphabetical order
  #
  ##### Docker Security #####
  #
  ## - Socket Proxy (Docker Socket Protector)
  ## - WatchTower (Docker Container Updater)
  #
  ##### Docker Utility Apps #####
  #
  ## - Docker GC (Garbage Collection)
  ## - Dozzle (Docker Log Viewer)
  ## - FileBrowser (Browse Downloads and other Files)
  ## - Portainer (Container Manager)
  #
  ##### Authentication #####
  #
  ## - Authelia
  ## - OpenLDAP
  ## See: https://www.authelia.com/integration/prologue/get-started/
  ## and https://thehomelab.wiki/books/dns-reverse-proxy/page/setup-authelia-to-work-with-nginx-proxy-manager
  #
  ##### Frontend UI Apps #####
  #
  ## - Homarr (Application Dashboard)
  ## - Nginx (Webserver/Reverse Proxy)
  #
  ##### Backend Apps #####
  #
  ## - Postgres (Relational Database)
  ## - PGAdmin (DB Web UI)
  #
  ##### Downloader/Torrenting Apps #####
  #
  ## - Gluetun (VPN Helper)  
  ## - Transmission (Torrentor)
  #
  ##### Media Apps #####
  #
  ## - Bazarr (Subtitles)
  ## - Lidarr (Music)
  ## - Overseerr (Media Requester)
  ## - Prowlarr (Indexer Manager)
  ## - Radarr (Movies)
  ## - Readarr (Books)
  ## - Sonarr (TV Shows)
  #
  ##### Media Server Apps #####
  #
  ## - Handbrake (Video Converter)
  ## - Picard (Music Management)
  ## - Plex (Media Server)
  ## - Tautulli (Plex Monitoring)
  ## - Wrapparr (Plex History and UX Helper)
#

########## SERVICES PORTS ##########
#
##### APPS WITHOUT A WEB UI PORT #####
#
  ## - Docker GC
  ## - Socket Proxy
  ## - WatchTower
#

##### APPS WITH A WEB UI PORT #####
##### IN ORDER BY PORT NUMBER #####
#
  ## 80/443 - Nginx Proxy
  ## 8080 - Authelia
  ## 8081 - Portainer
  ## 8082 - Nginx Proxy Admin
  ## 8083 - Homarr
  ## 8084 - Filebrowser
  ## 8085 - PGAdmin        # TO FIX
  ## 8086 - PGAdmin TLS    # TO FIX- needs cert file
  ## 8087 - Tautulli
  ## 8088 - Dozzle
  #
  ## 8090 - Overseerr
  ## 8091 - Bazarr
  ## 8092 - Lidarr
  ## 8093 - Prowlarr
  ## 8094 - Radarr
  ## 8095 - Readarr
  ## 8096 - Sonarr
  ## 8097 - Handbrake
  ## 8098 - Picard
  ## 8099 - Wrapper
  ## 8100 - Transmission
  #
  ## 32400 - Plex
#
##### IN ORDER BY APPLICATION #####
#
####  APPLICATION  #### EXT PORT ### INT PORT ####
  ## Authelia        #   8080/tcp   #   9091/tcp   #
  ## Bazarr          #   8091/tcp   #   6767/tcp   #
  ## Dozzle          #   8088/tcp   #   8080/tcp   #
  ## FileBrowser     #   8084/tcp   #    80/tcp    #
  ## Handbrake       #   8097/tcp   #   5800/tcp   #
  ## Homarr          #   8083/tcp   #   7575/tcp   #
  ## Lidarr          #   8092/tcp   #   8686/tcp   #
  ## Nginx Admin     #   8082/tcp   #   8181/tcp   #
  ## Nginx Proxy     #  80/443/tcp  #  80/443/tcp  #
  ## OpenLDAP        #              #              #  - to add
  ## Overseerr       #   8090/tcp   #   5055/tcp   #
  ## PGAdmin         #   8085/tcp   #    80/tcp    #
  ## PGAdmin TLS     #   8086/tcp   #    443/tcp   #
  ## Picard          #   8098/tcp   #   5800/tcp   #
  ## Plex            #  32400/tcp   #  32400/tcp   #
  ## Portainer       #   8081/tcp   #   9443/tcp   #
  ## Prowlarr        #   8093/tcp   #   9696/tcp   #
  ## Radarr          #   8094/tcp   #   7878/tcp   #
  ## Readarr         #   8095/tcp   #   8787/tcp   #
  ## Tautulli        #   8087/tcp   #   8181/tcp   #
  ## Transmission    #   8100/tcp   #   9091/tcp   #
  ## Sonarr          #   8096/tcp   #   8989/tcp   #
  ## Wrapper         #   8099/tcp   #   8282/tcp   #
#
########## SPECIAL DEFINITION ##########
#
# All services definition follow the same format
  # name
  # >> Container Creation Settings
  #   extension fields
  #   container_name
  #   image
  #   commands
  #   privileges
  #   any dependencies
  # >> Network Settings
  #   networks
  #   ports
  # >> Container Use Settings
  #   devices
  #   volumes
  #   secrets
  #   environment
#

########## DOCKER SECURITY INFORMATION ##########
# To limit threat vectors and attack landscape, limit what containers are connected to the Docker Socket API. As such connection enables execution of Docker commands.
  # To achieve this, in this implementation, the container docker-socket-proxy has been added to proxy connection requests to the Docker Socket API.
  #
  # See: https://stackoverflow.com/questions/35110146/what-is-the-purpose-of-the-file-docker-sock
  # See also: https://github.com/Tecnativa/docker-socket-proxy
  # See also: https://dev.to/pbnj/docker-security-best-practices-45ih#docker-engine
  #
  # Containers with access to the Docker Socket will have this volume assigned as follows:
  #
  ##  volumes:
  ##    - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #
  # Containers might also be given this port access for the socket proxy
  #
  ##  environment:
  ##    DOCKER_HOST: tcp://socket-proxy:2375
  # 
  # In this implementation the following are the only (currently) allowed apps to have access to the Docker Socket API directly:
    ## Docker Socket Proxy # Socket Proxy Protection  #
    ## Docker-GC           # Docker Garbage Collector #
    ## Dozzle              # Docker Log Viewer        #
    ## Portainer           # Container Manager        #
    ## Watchtower          # Container Updater        #
  #
#  

########## DOCKER APPS ##########

services:

  ########## DOCKER SECURITY ##########
  # Socket Proxy - For Docker Socket Protection
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    privileged: true # true for VMs, false for LXCs
    restart: always
    networks: 
      - socket_proxy
    ports:
      - "2375:2375" # !!!WARNING!!! DO NOT EXPOSE OVER PUBLIC INTERNET
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TZ}
      - LOG_LEVEL=info # info for setup, change to 'err' or higher for production
      # debug,info,notice,warning,err,crit,alert,emerg
      #
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=0 # Disabled for security purposes, potential change if needed by a container
      ## Revoked by Default
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      ## Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0 # Disabled for security purposes, potential change if needed by a container
      - CONTAINERS=1 # Nginx, Portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0 
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # WatchTower - Automatic Docker Container Updates
  watchtower:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: watchtower
    image: containrrr/watchtower
    networks:
      #- backend_proxy # Check if needed
      #- frontend_proxy # check if needed
      - socket_proxy
    volumes:
      - ${DOCKERDIR}/appdata/watchtower/config:/config
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *higher-puid-pgid
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
      DOCKER_HOST: tcp://socket-proxy:2375
      DOCKER_API_VERSION: "1.40"

  ########## DOCKER UTILITES ##########

  # Docker-GC - Automatic Docker Garbage Collection
  dockergc:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: docker-gc
    image: clockworksoul/docker-gc-cron:latest
    networks:
      - socket_proxy
    volumes:
      - ${DOCKERDIR}/appdata/docker-gc/config:/config
      - ${DOCKERDIR}/appdata/docker-gc/./docker-gc-exclude:/etc/docker-gc-exclude # Create empty file
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *higher-puid-pgid
      CRON: 0 0 0 * * ? # Run everyday at midnight
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      DOCKER_HOST: tcp://socket-proxy:2375

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    <<: *common-keys-apps
    container_name: dozzle
    image: amir20/dozzle:latest
    networks:
      #- backend_proxy # Check if needed
      #- frontend_proxy # Check if needed
      - socket_proxy
    ports:
      - "8088:8080" # INT PORT: 8080/tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *higher-puid-pgid
      DOZZLE_LEVEL: info
      DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label.
      DOCKER_HOST: tcp://socket-proxy:2375

  # File Browser - Explorer
  filebrowser:
    <<: *common-keys-apps 
    container_name: filebrowser
    image: filebrowser/filebrowser:s6
    ports:
      - "8084:80" # INT PORT: 80/tcp
    volumes:
      - ${DOCKERDIR}/appdata/filebrowser/config:/config 
      - ${DOCKERDIR}/appdata/filebrowser/data:/data
      - ${DATADIR}/downloads:/downloads
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6

  # Portainer - Container Manager
  portainer:
    <<: *common-keys-core
    container_name: portainer
    image: portainer/portainer-ce:latest
    depends_on: 
      - socket-proxy
    command: [-H, tcp://socket-proxy:2375] # For Docker Socket Proxy
    ports: 
      - "8081:9443" # INT PORT: 9000/tcp and 9443/tcp
      # - "8000:8000" # Tunnel Server port for Portainer Agent Communications
    volumes:
      - ${DOCKERDIR}/appdata/portainer/config:/config
      - ${DOCKERDIR}/appdata/portainer/data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      DOCKER_HOST: tcp://socket-proxy:2375

  ########## AUTHENTICATION ##########

  # Authelia - SSO Authentication Service
  authelia:
    <<: *common-keys-core
    container_name: authelia
    image: authelia/authelia
    ports: 
      - "8080:9091" # INT PORT: 9091/tcp
    volumes:
      - ${DOCKERDIR}/appdata/authelia/config:/config
      - ${DOCKERDIR}/appdata/authelia/data:/data
      - ${DOCKERDIR}/appdata/authelia/secrets:/secrets
    secrets:
      - AUTHELIA_ENCRYPTION_SECRETS_FILE
      - AUTHELIA_JWT_SECRETS_FILE
      - AUTHELIA_POSTGRES_SECRETS_FILE
      - AUTHELIA_SESSION_SECRET_FILE
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: /run/secrets/AUTHELIA_JWT_SECRETS_FILE
      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/AUTHELIA_SESSION_SECRETS_FILE
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/AUTHELIA_ENCRYPTION_SECRETS_FILE
      AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: /run/secrets/AUTHELIA_POSTGRES_SECRETS_FILE
      #AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: '/secrets/JWT_SECRET'
      #AUTHELIA_SESSION_SECRET_FILE: '/secrets/SESSION_SECRET'
      #AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: '/secrets/STORAGE_ENCRYPTION_KEY'
      #AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: '/secrets/STORAGE_PASSWORD'

  # OpenLDAP - IAM Solution

  #     FIX ME     # 
  #     FIX ME     #
  #     FIX ME     # 
  #     FIX ME     # 
  #     FIX ME     # 

  ########## FRONTENDS ##########

  # Homarr - Application Dashboard
  homarr:
    <<: *common-keys-core
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    ports:
      - "8083:7575" # INT PORT: 7575/tcp
    volumes:
      - ${DOCKERDIR}/appdata/homarr/config:/config
      - ${DOCKERDIR}/appdata/homarr/data:/data
      - ${DOCKERDIR}/appdata/homarr/icons:/app/public/icons
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6

  # Nginx Proxy Manager - Reverse Proxy with LetsEncrypt
  nginx:
    <<: *common-keys-core
    container_name: nginx
    image: 'jc21/nginx-proxy-manager:latest'
    ports:
      - "80:80" # INT PORT: 80/tcp (http port for LetEncrypt setup !!! WARNING !!! This should be closed for production setups)
      - "443:443" # INT PORT: 443/tcp (https port)
      - "8082:8181" # INT PORT: 8181/tcp (admin port)
    volumes:
      - ${DOCKERDIR}/appdata/nginx/config:/config 
      - ${DOCKERDIR}/appdata/nginx/data:/data
      - ${DOCKERDIR}/appdata/nginx/letsencrypt:/etc/letsencrypt
      - ${DOCKERDIR}/data/nginx/snippets:/snippets
    environment:
      <<: *disable-ipv6
      DB_SQLITE_FILE: "/config/database.sqlite"

  ########## BACKENDS ##########

  # Postgres - Database for Authelia and OpenLDAP
  postgres:
    <<: *common-keys-db
    container_name: postgres
    image: "postgres:latest"
    healthcheck:
      test: [ "CMD", "pg_isready"]
      timeout: 45s
      interval: 1s
      retries: 10
    ports:
      - "5432:5432" # INT PORT: 5432/tcp
    volumes:
      - ${DOCKERDIR}/appdata/postgres/config:/config
      - ${DOCKERDIR}/appdata/postgres/data:/var/lib/postgresql/data
      #- ./sql:/docker-entrypoint-initdb.d/:ro # turn it on, if you need run init DB
    secrets:
      - DB_SECRETS_FILE
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      POSTGRES_USER: ${DB_USER}
      POSTGRES_ROOT_PASSWORD_FILE: /run/secrets/DB_ROOT_SECRETS_FILE
      POSTGRES_PASSWORD_FILE: /run/secrets/DB_SECRETS_FILE
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST: ${DB_HOST}

  # PGAdmin - Application Dashboard for Postgres DB
  pgadmin:
    <<: *common-keys-db
    container_name: pgadmin
    image: "dpage/pgadmin4:5.1"
    depends_on:
      - postgres
    ports:
      - "8085:80" # INT PORT: 80/tcp (http port for init setup !!! WARNING !!! This should be closed for production setups)
      - "8086:9443" # INT PORT: 9443/tcp (https port)
    volumes:
      - ${DOCKERDIR}/appdata/pgadmin/config:/config
      - ${DOCKERDIR}/appdata/pgadmin/data:/data
      - ${DOCKERDIR}/appdata/pgadmin/certs/priv.cert:/certs/server.cert
      - ${DOCKERDIR}/appdata/pgadmin/certs/priv.key:/certs/server.key
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      PGADMIN_DEFAULT_EMAIL: ${PG_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASS}
      PGADMIN_ENABLE_TLS: true

  ########## DOWNLOADERS/VPNS ##########

  # Transmission - Torrentor
  transmission:
    <<: *common-keys-apps
    container_name: transmission
    image: lscr.io/linuxserver/transmission:latest
    depends_on:
      - gluetun
    ports:
      - "8100:9091" # INT PORT: 9091/tcp
      - "51413:51413" # INT PORT 51413/tcp
      - "51413:51413/udp" # INT PORT 51413/udp
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - ${DOCKERDIR}/appdata/transmission/config:/config
      - ${DOCKERDIR}/appdata/transmission/data:/data
      - ${DATADIR}/downloads:/downloads
    environment:
      # Leave IPv6 enabled for easier torrenting
      <<: *basic-tz-puid-pgid
      TRANSMISSION_WEB_HOME: #optional
      USER=: #optional
      PASS: #optional
      WHITELIST: #optional
      PEERPORT: #optional
      HOST_WHITELIST: #optional

  ########## MEDIA APPS - THE ARRs ##########

  # Bazarr - Subtitle Management
  bazarr:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    ports:
      - "8091:6767" # INT PORT: 6767/tcp
    volumes:
      - ${DOCKERDIR}/appdata/bazarr:/config
      - ${DOCKERDIR}/appdata/data:/data
      - ${DATADIR}/media/movies:/media/movies
      - ${DATADIR}/media/tvshows:/media/tvshows
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      UMASK_SET: 002

  # Lidarr - Music Management
  lidarr:
    <<: *common-keys-media
    container_name: lidarr
    image: lscr.io/linuxserver/lidarr:latest
    ports:
      - "8092:8686" # INT PORT: 8686/tcp
    volumes:
      - ${DOCKERDIR}/appdata/lidarr/config:/config
      - ${DOCKERDIR}/appdata/lidarr/data:/data
      - ${DATADIR}/downloads:/downloads
      - ${DATADIR}/media/music:/media
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6

  # Overseerr - Media Requester
  overseerr:
    <<: *common-keys-apps
    container_name: overseerr
    image: lscr.io/linuxserver/overseerr:latest
    ports:
      - "8090:5055" # INT PORT: 5055/tcp
    volumes:
      - ${DOCKERDIR}/apps/overseer/config:/config
      - ${DOCKERDIR}/appdata/overseer/data:/data
      - ${DATADIR}/downloads:/downloads #Is this necessary?
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6

  # Prowlarr - Indexer Management
  prowlarr:
    <<: *common-keys-apps
    container_name: prowlarr
    image: ghcr.io/linuxserver/prowlarr:latest
    ports:
      - "8093:9696" # INT PORT: 9696/tcp
    volumes:
      - ${DOCKERDIR}/appdata/prowlarr/config:/config
      - ${DOCKERDIR}/appdata/prowlarr/data:/data
      - ${DATADIR}/downloads:/downloads
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6

  # Radarr - Movie Management
  radarr:
    <<: *common-keys-media
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    ports:
      - "8094:7878" # INT PORT: 7878/tcp
    volumes:
      - ${DOCKERDIR}/apps/radarr/config:/config
      - ${DOCKERDIR}/appdata/radarr/data:/data/
      - ${DATADIR}/downloads:/downloads
      - ${DATADIR}/media/movies:/media/movies
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6

  # Readarr - Books Management
  readarr:
    <<: *common-keys-media
    container_name: readarr
    image: lscr.io/linuxserver/readarr:develop
    ports:
      - "8095:8787" # INT PORT: 8787/tcp
    volumes:
      - ${DOCKERDIR}/appdata/readarr/config:/config
      - ${DOCKERDIR}/appdata/readarr/data:/data
      - ${DATADIR}/downloads:/downloads
      - ${DATADIR}/media/books:/media/books
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6

  # Sonarr - TV Shows Management
  sonarr:
    <<: *common-keys-media
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    ports:
      - "8096:8989" # INT PORT: 8989/tcp
    volumes:
      - ${DOCKERDIR}/apps/sonarr/config:/config
      - ${DOCKERDIR}/appdata/sonarr/data:/data
      - ${DATADIR}/downloads:/downloads
      - ${DATADIR}/media/tvshows:/media/tvshows
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      UMASK_SET: 002
  
  ########## MEDIA SERVER APPS ##########

  # Handbrake - Video Conversion (Transcoding and compression)
  handbrake:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: handbrake
    image: jlesage/handbrake:latest
    ports:
      - "8097:5800" # INT PORT: 5800/tcp
    volumes:
      - ${DOCKERDIR}/appdata/handbrake/config:/config
      - ${DOCKERDIR}/appdata/handbrake/data:/data
      - ${DOCKERDIR}/appdata/handbrake/watch:/watch
      - ${DATADIR}/downloads:/downloads
      - ${DATADIR}/media/tvshows:/media/tvshows
      - ${DATADIR}/media/movies:/media/movies
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      UMASK_SET: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      AUTOMATED_CONVERSION_KEEP_SOURCE: 1

  # Picard - Music Library Tagging and Management
  picard:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: picard
    image: mikenye/picard:latest
    ports:
      - "8098:5800" # INT PORT: 5800/tcp 
    volumes:
      - ${DOCKERDIR}/appdata/picard:/config:rw
      - ${DATADIR}/media/music:/media/music
      - ${DATADIR}/media/podcasts:/media/podcasts
      - ${DATADIR}/media/playlists:/media/playlists
      - /dev/shm:/dev/shm
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      DISPLAY_WIDTH: 1920
      DISPLAY_HEIGHT: 1080

  # Plex - Media Server
  plex:
    <<: *common-keys-core
    container_name: plex
    image: plexinc/pms-docker:public
    ports:
      - "32400:32400" # INT PORT: 32400/tcp (this is the web port)
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      # - "1900:1900/udp" # Conflicts with xTeVe and Synology default ports
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      # - "33400:33400" # If you use Plex Web Tools
    devices:
      - /dev/dri:/dev/dri # for harware transcoding
    volumes:
      - ${DOCKERDIR}/appdata/plex/config:/config
      - ${DOCKERDIR}/appdata/plex/data:/data
      - ${DATADIR}/media/movies:/media/movies
      - ${DATADIR}/media/music:/media/music
      - ${DATADIR}/media/podcasts:/media/podcasts
      - ${DATADIR}/media/playlists:/media/playlists
      - ${DATADIR}/media/tvshows:/media/tvshows
      - /dev/shm:/transcode
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      HOSTNAME: "media.${DOMAIN}"
      #PLEX_CLAIM_FILE: $PLEX_CLAIM # is this even needed
      ADVERTISE_IP: http://${SERVER_IP}:32400/

  # Tautulli - Plex Stats and Monitoring
  tautulli:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: tautulli
    image: linuxserver/tautulli:latest
    depends_on:
      - plex
    ports:
      - "8087:8181" # INT PORT: 8181/tcp
    volumes:
      - ${DOCKERDIR}/appdata/tautulli/config:/config
      - ${DOCKERDIR}/appdata/tautulli/data:/data
      - ${DOCKERDIR}/appdata/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro # For tautulli Plex log viewer
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6
      
  # Wrapperr - Plex History and UX Helper
  wrapperr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: wrapperr
    image: ghcr.io/aunefyren/wrapperr:latest
    depends_on:
      - plex
    ports:
      - "8099:8282" # INT PORT: 8282/tcp
    volumes:
      - ${DOCKERDIR}/appdata/wrapperr/config:/config
      - ${DOCKERDIR}/appdata/wrapperr/data:/data
    environment:
      <<: *basic-tz-puid-pgid
      <<: *disable-ipv6